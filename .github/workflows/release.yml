name: Release

on:
  push:
    tags:
      - '*'

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: read
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build plugin
        run: npm run build

      - name: Create styles.css if it doesn't exist
        run: |
          if [ ! -f "styles.css" ]; then
            echo "/* WhisperScribe Plugin Styles */" > styles.css
            echo "Creating empty styles.css file"
          fi

      - name: Validate release files
        run: |
          echo "🔍 Validating release files..."
          
          # Check required files exist
          required_files=("manifest.json" "main.js" "styles.css")
          for file in "${required_files[@]}"; do
            if [ ! -f "$file" ]; then
              echo "❌ Required file missing: $file"
              exit 1
            fi
            echo "✅ Found: $file"
          done
          
          # Validate manifest version matches tag
          MANIFEST_VERSION=$(jq -r .version manifest.json)
          TAG_VERSION=${GITHUB_REF#refs/tags/}
          
          if [ "$MANIFEST_VERSION" != "$TAG_VERSION" ]; then
            echo "❌ Version mismatch: manifest.json has '$MANIFEST_VERSION' but tag is '$TAG_VERSION'"
            exit 1
          fi
          
          echo "✅ Version validation passed: $MANIFEST_VERSION"

      - name: Get plugin info
        id: plugin-info
        run: |
          echo "name=$(jq -r .name manifest.json)" >> $GITHUB_OUTPUT
          echo "version=$(jq -r .version manifest.json)" >> $GITHUB_OUTPUT
          echo "description=$(jq -r .description manifest.json)" >> $GITHUB_OUTPUT
          echo "minAppVersion=$(jq -r .minAppVersion manifest.json)" >> $GITHUB_OUTPUT

      - name: Extract changelog for current version
        id: changelog
        run: |
          CURRENT_TAG=${GITHUB_REF#refs/tags/}
          
          # Extract the section for current version from CHANGELOG.md
          # Find the section starting with "## $CURRENT_TAG" and ending before the next "## " line
          awk "/^## $CURRENT_TAG/{flag=1; next} /^## /{flag=0} flag" CHANGELOG.md > CHANGELOG_TEMP.md
          
          # Check if changelog content is empty and provide fallback
          if [ ! -s CHANGELOG_TEMP.md ] || [ ! "$(grep -v '^[[:space:]]*$' CHANGELOG_TEMP.md)" ]; then
            echo "## What's Changed" > CHANGELOG_TEMP.md
            echo "" >> CHANGELOG_TEMP.md
            echo "- Maintenance and infrastructure updates" >> CHANGELOG_TEMP.md
          fi
          
          # Set multiline output
          echo "content<<EOF" >> $GITHUB_OUTPUT
          cat CHANGELOG_TEMP.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create plugin zip
        run: |
          mkdir -p dist
          cp manifest.json main.js styles.css dist/
          cd dist
          zip -r ../whisperscribe.zip .
          cd ..
          echo "✅ Created whisperscribe.zip with plugin files"

      - name: Create release
        uses: softprops/action-gh-release@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          name: ${{ steps.plugin-info.outputs.name }} v${{ steps.plugin-info.outputs.version }}
          body: |
            ${{ steps.plugin-info.outputs.description }}
            
            ${{ steps.changelog.outputs.content }}
            
            ## Installation
            
            ### Option 1: Download ZIP (Recommended)
            1. Download `whisperscribe.zip` from this release
            2. Extract the zip file
            3. Copy the extracted folder to your vault's `.obsidian/plugins/` directory
            4. Reload Obsidian and enable the plugin in Settings > Community Plugins
            
            ### Option 2: Manual Installation
            1. Download `manifest.json`, `main.js`, and `styles.css` from this release
            2. Create a folder named `whisperscribe` in your vault's `.obsidian/plugins/` directory
            3. Place the downloaded files in the new folder
            4. Reload Obsidian and enable the plugin in Settings > Community Plugins
          files: |
            whisperscribe.zip
            manifest.json
            main.js
            styles.css
          generate_release_notes: false
          draft: false
          prerelease: false

      - name: Notify success
        run: |
          echo "🎉 Release created successfully!"
          echo "📦 Plugin files (manifest.json, main.js, styles.css) have been attached to the release."